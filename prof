Timer unit: 1e-06 s

Total time: 46.5332 s
File: /mxn/home/viknik/ptycho/solver_gpu.py
Function: fwd_ptycho at line 82

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
    82                                               @profile
    83                                               # ptychography transform (FQ)
    84                                               def fwd_ptycho(self, psi):
    85       129       5266.0     40.8      0.0          res_gpu = np.zeros(self.ptychoshape, dtype='complex64', order='C')
    86       387       1331.0      3.4      0.0          for k in range(0, self.ptychoshape[0]//self.theta_gpu):
    87                                                       # process self.theta_gpu angles on 1gpu simultaneously
    88       258        683.0      2.6      0.0              ast, aend = k*self.theta_gpu, (k+1)*self.theta_gpu
    89       258       2132.0      8.3      0.0              self.cl_ptycho.setobj(self.scanax[ast:aend], self.scanay[ast:aend],
    90       258      36695.0    142.2      0.1                                    self.prb.complex.view('float32'))
    91       258        669.0      2.6      0.0              self.cl_ptycho.fwd(res_gpu[ast:aend].view(
    92       258   46486351.0 180179.7     99.9                  'float32'), psi[ast:aend].view('float32'))
    93                                           
    94                                                   # res = np.zeros([self.theta.size,
    95                                                   #                 self.scanax.shape[1]*self.scanay.shape[1],
    96                                                   #                 self.det.x,self.det.y],dtype='complex64')
    97                                           
    98                                                   # npadx = (self.det.x - self.prb.size) // 2
    99                                                   # npady = (self.det.y - self.prb.size) // 2
   100                                           
   101                                                   # for k in range(self.theta.size):
   102                                                   #     for m in range(self.scanax.shape[1]):
   103                                                   #         for n in range(self.scanay.shape[1]):
   104                                                   #             stx = self.scanax[k,m]
   105                                                   #             sty = self.scanay[k,n]
   106                                                   #             if (stx==-1 or sty==-1):
   107                                                   #                 continue
   108                                                   #             phi = np.multiply(self.prb.complex, psi[k][stx:stx+self.prb.size, sty:sty+self.prb.size])
   109                                                   #             phi = np.pad(phi, ((npadx, npadx), (npady, npady)), mode='constant')
   110                                                   #             res[k,n+m*self.scanay.shape[1]] = np.fft.fft2(phi)/np.sqrt(phi.shape[0]*phi.shape[1])
   111                                           
   112                                                   #             # phi = np.pad(
   113                                                   #             #     phi, ((npadx, npadx), (npady, npady)), mode='constant')
   114                                                   #             # tmp[n+m*self.scanay.shape[1]] = np.fft.fft2(phi) / \
   115                                                   #             #     np.sqrt(phi.shape[0]*phi.shape[1])
   116                                           
   117                                                   # import matplotlib.pyplot as plt
   118                                                   # plt.subplot(2,2,1)
   119                                                   # plt.imshow(res[0,0].real)
   120                                                   # plt.colorbar()
   121                                                   # plt.subplot(2,2,2)
   122                                                   # plt.imshow(res_gpu[0,0].real)
   123                                                   # plt.colorbar()
   124                                                   # plt.subplot(2,2,3)
   125                                                   # plt.imshow(res[0,0].imag)
   126                                                   # plt.colorbar()
   127                                                   # plt.subplot(2,2,4)
   128                                                   # plt.imshow(res_gpu[0,0].imag)
   129                                                   # plt.colorbar()
   130                                                   # plt.show()
   131                                                   # print('fwd ptycho '+str(np.linalg.norm(res-res_gpu)/np.linalg.norm(res)))
   132       129         85.0      0.7      0.0          return res_gpu

Total time: 26.5163 s
File: /mxn/home/viknik/ptycho/solver_gpu.py
Function: adj_ptycho at line 134

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   134                                               @profile
   135                                               # adjoint ptychography transfrorm (Q*F*)
   136                                               def adj_ptycho(self, data):
   137       128     220306.0   1721.1      0.8          res_gpu = np.zeros(self.tomoshape, dtype='complex64', order='C')
   138       384       1768.0      4.6      0.0          for k in range(0, self.ptychoshape[0]//self.theta_gpu):
   139                                                       # process self.theta_gpu angles on 1gpu simultaneously
   140       256        561.0      2.2      0.0              ast, aend = k*self.theta_gpu, (k+1)*self.theta_gpu
   141       256       1765.0      6.9      0.0              self.cl_ptycho.setobj(self.scanax[ast:aend], self.scanay[ast:aend],
   142       256      31229.0    122.0      0.1                                    self.prb.complex.view('float32'))
   143       256        620.0      2.4      0.0              self.cl_ptycho.adj(res_gpu[ast:aend].view(
   144       256   26260026.0 102578.2     99.0                  'float32'), data[ast:aend].view('float32'))
   145                                           
   146                                                   # res = np.zeros(self.tomoshape,dtype='complex64')scan
   147                                                   # npadx = (self.det.x - self.prb.size) // 2
   148                                                   # npady = (self.det.y - self.prb.size) // 2
   149                                           
   150                                                   # for k in range(self.theta.size):
   151                                                   #     for m in range(self.scanax.shape[1]):
   152                                                   #         for n in range(self.scanay.shape[1]):
   153                                                   #             tmp = data[k,n+m*self.scanay.shape[1]]
   154                                                   #             iphi = np.fft.ifft2(tmp)*np.sqrt(tmp.shape[0]*tmp.shape[1])
   155                                                   #             delphi = iphi[npadx:npadx+self.prb.size, npady:npady+self.prb.size]
   156                                                   #             stx = self.scanax[k,m]
   157                                                   #             sty = self.scanay[k,n]
   158                                                   #             if(stx==-1 or sty==-1):
   159                                                   #                 continue
   160                                                   #             res[k,stx:stx+self.prb.size, sty:sty+self.prb.size] += np.multiply(np.conj(self.prb.complex), delphi)
   161                                           
   162                                                   # import matplotlib.pyplot as plt
   163                                                   # plt.subplot(2,2,1)
   164                                                   # plt.imshow(res[0].real)
   165                                                   # plt.colorbar()
   166                                                   # plt.subplot(2,2,2)
   167                                                   # plt.imshow(res_gpu[0].real)
   168                                                   # plt.colorbar()
   169                                                   # plt.subplot(2,2,3)
   170                                                   # plt.imshow(res[0].imag)
   171                                                   # plt.colorbar()
   172                                                   # plt.subplot(2,2,4)
   173                                                   # plt.imshow(res_gpu[0].imag)
   174                                                   # plt.colorbar()
   175                                                   # plt.show()
   176                                                   # print('adj ptycho '+str(np.linalg.norm(res-res_gpu)/np.linalg.norm(res)))
   177                                           
   178       128         75.0      0.6      0.0          return res_gpu

Total time: 87.9654 s
File: /mxn/home/viknik/ptycho/solver_gpu.py
Function: update_amp at line 218

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   218                                               @profile
   219                                               # amplitude update in Gradient descent ptychography
   220                                               def update_amp(self, init, data):
   221       384       2183.0      5.7      0.0          for k in range(0, self.tomoshape[0]//self.theta_gpu):
   222                                                       # process self.theta_gpu angles on 1gpu simultaneously
   223       256        794.0      3.1      0.0              ast, aend = k*self.theta_gpu, (k+1)*self.theta_gpu
   224       256       2128.0      8.3      0.0              self.cl_ptycho.setobj(self.scanax[ast:aend], self.scanay[ast:aend],
   225       256      32996.0    128.9      0.0                                    self.prb.complex.view('float32'))
   226       256        297.0      1.2      0.0              self.cl_ptycho.update_amp(
   227       256   87926869.0 343464.3    100.0                  init[ast:aend].view('float32'), data[ast:aend].real)
   228                                           
   229                                                   # res = init.copy()
   230                                                   # for k in range(self.theta.size):
   231                                                   #     res[k] = np.multiply(np.sqrt(data[k]), np.exp(1j * np.angle(res[k])))
   232                                           
   233                                                   # import matplotlib.pyplot as plt
   234                                                   # plt.subplot(2,2,1)
   235                                                   # plt.imshow(res[0,0].real)
   236                                                   # plt.colorbar()
   237                                                   # plt.subplot(2,2,2)
   238                                                   # plt.imshow(res_gpu[0,0].real)
   239                                                   # plt.colorbar()
   240                                                   # plt.subplot(2,2,3)
   241                                                   # plt.imshow(res[0,0].imag)
   242                                                   # plt.colorbar()
   243                                                   # plt.subplot(2,2,4)
   244                                                   # plt.imshow(res_gpu[0,0].imag)
   245                                                   # plt.colorbar()
   246                                                   # plt.show()
   247                                                   # print('update ptycho '+str(np.linalg.norm(res-res_gpu)/np.linalg.norm(res)))
   248       128         96.0      0.8      0.0          return init

Total time: 166.787 s
File: /mxn/home/viknik/ptycho/solver_gpu.py
Function: grad_ptycho at line 262

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   262                                               @profile
   263                                               # Gradient descent ptychography
   264                                               def grad_ptycho(self, data, init, niter, rho, gamma, hobj, lamd):
   265       128     266793.0   2084.3      0.2          psi = init.copy()
   266       256       1443.0      5.6      0.0          for i in range(niter):
   267       128   46182058.0 360797.3     27.7              tmp = self.fwd_ptycho(psi)
   268       128   87969483.0 687261.6     52.7              tmp = self.update_amp(tmp, data)
   269       128   26520631.0 207192.4     15.9              upd1 = self.adj_ptycho(tmp)
   270       128     960244.0   7501.9      0.6              upd2 = self.adjfwd_prb(psi)
   271                                                       psi = (1 - rho*gamma) * psi + rho*gamma * \
   272       128    3444835.0  26912.8      2.1                  (hobj - lamd/rho) + (gamma / 2) * (upd1-upd2) / \
   273       128    1441574.0  11262.3      0.9                  np.power(np.abs(self.prb.complex), 2).max()
   274       128         99.0      0.8      0.0          return psi

Total time: 192.715 s
File: /mxn/home/viknik/ptycho/solver_gpu.py
Function: admm at line 276

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   276                                               @profile
   277                                               # ADMM for ptycho-tomography problem
   278                                               def admm(self, data, h, psi, lamd, x, rho, gamma, eta, piter, titer, NITER):
   279       129        186.0      1.4      0.0          for m in range(NITER):
   280                                                       # psi update
   281       128  167083873.0 1305342.8     86.7              psi = self.grad_ptycho(data, psi, piter, rho, gamma, h, lamd)
   282                                                       # x update
   283       128   11252783.0  87912.4      5.8              tmp0 = self.logtomo(psi+lamd/rho)
   284       128    4503585.0  35184.3      2.3              _x = self.grad_tomo(tmp0, titer, x, rho, eta)
   285                                           
   286                                                       # lambda update
   287       128    1049519.0   8199.4      0.5              _h = self.fwd_tomo(_x.complexform)
   288       128    6743755.0  52685.6      3.5              _h = self.exptomo(_h)
   289       128    1014210.0   7923.5      0.5              _lamd = lamd + rho * (psi - _h)
   290                                                       # convergence
   291       128        508.0      4.0      0.0              cp = np.sqrt(
   292       128    1010212.0   7892.3      0.5                  np.sum(np.power(np.abs(_x.complexform-x.complexform), 2)))
   293       128       7338.0     57.3      0.0              print(m, cp)
   294                                           
   295       128       1587.0     12.4      0.0              lamd = _lamd
   296       128        498.0      3.9      0.0              x = _x
   297       128       4090.0     32.0      0.0              h = _h
   298                                           
   299         1      20844.0  20844.0      0.0          dxchange.write_tiff(x.beta,  'beta2/beta')
   300         1      21797.0  21797.0      0.0          dxchange.write_tiff(x.delta,  'delta2/delta')

