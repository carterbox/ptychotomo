Timer unit: 1e-06 s

Total time: 0 s
File: /home/beams0/VNIKITIN/ptycho/solver.py
Function: grad_tomo at line 120

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   120                                               @profile
   121                                               # Gradient descent tomography
   122                                               def grad_tomo(self, data, niter, init, eta):
   123                                                   r = 1/np.sqrt(data.shape[0]*data.shape[1]/2)
   124                                                   res = init.complexform/r
   125                                                   for i in range(niter):
   126                                                       tmp = self.fwd_tomo(res)*r
   127                                                       tmp = self.adj_tomo(2*(tmp-data))*r
   128                                                       res = res - eta*tmp
   129                                                   res *= r
   130                                                   return objects.Object(res.imag, res.real, self.voxelsize)

Total time: 0 s
File: /home/beams0/VNIKITIN/ptycho/solver.py
Function: grad_ptycho at line 131

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   131                                               @profile
   132                                               # Gradient descent ptychography
   133                                               def grad_ptycho(self, data, init, niter, rho, gamma, hobj, lamd):
   134                                                   psi = init.copy()
   135                                                   for i in range(niter):
   136                                                       tmp = self.fwd_ptycho(psi)
   137                                                       tmp = self.update_amp(tmp, data)
   138                                                       upd1 = self.adj_ptycho(tmp)
   139                                                       upd2 = self.adjfwd_prb(psi)
   140                                                       psi = (1 - rho*gamma) * psi + rho*gamma * \
   141                                                           (hobj - lamd/rho) + (gamma / 2) * (upd1-upd2)
   142                                                   return psi

Total time: 0 s
File: /home/beams0/VNIKITIN/ptycho/solver.py
Function: admm at line 144

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   144                                               @profile
   145                                               # ADMM for ptycho-tomography problem
   146                                               def admm(self, data, hobj, psi, lamd, recobj, rho, gamma, eta, piter, titer):
   147                                                   for m in range(10):
   148                                                       # Ptychography
   149                                                       psi = self.grad_ptycho(data, psi, piter, rho, gamma, hobj, lamd)
   150                                                       # Tomography
   151                                                       tmp = -1j*self.logtomo(psi+lamd/rho)
   152                                                       _recobj = self.grad_tomo(tmp, titer, recobj, eta)
   153                                                       # Lambda update
   154                                                       _hobj = self.fwd_tomo(_recobj.complexform)
   155                                                       _hobj = self.exptomo(_hobj)
   156                                                       _lamd = lamd + 1 * rho * (psi - _hobj)
   157                                           
   158                                                       # convergence
   159                                                       cp = np.sqrt(np.sum(np.power(np.abs(hobj-psi), 2)))
   160                                                       co = np.sqrt(
   161                                                           np.sum(np.power(np.abs(recobj.complexform - _recobj.complexform), 2)))
   162                                                       cl = np.sqrt(np.sum(np.power(np.abs(lamd-_lamd), 2)))
   163                                                       print(m, cp, co, cl)
   164                                           
   165                                                       # update to next iter
   166                                                       lamd = _lamd
   167                                                       recobj = _recobj
   168                                                       hobj = _hobj

Total time: 0.887378 s
File: /home/beams0/VNIKITIN/ptycho/solver_gpu.py
Function: grad_tomo at line 237

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   237                                               @profile
   238                                               # Gradient descent tomography
   239                                               def grad_tomo(self, data, niter, init, eta):
   240        10        127.0     12.7      0.0          r = 1/np.sqrt(data.shape[0]*data.shape[1]/2)
   241        10      27233.0   2723.3      3.1          res = init.complexform/r
   242        20         82.0      4.1      0.0          for i in range(niter):
   243        10     323139.0  32313.9     36.4              tmp = self.fwd_tomo(res)*r
   244        10     521041.0  52104.1     58.7              tmp = self.adj_tomo(2*(tmp-data))*r
   245        10      10380.0   1038.0      1.2              res = res - eta*tmp
   246        10       5218.0    521.8      0.6          res *= r
   247        10        158.0     15.8      0.0          return objects.Object(res.imag, res.real, self.voxelsize)

Total time: 12.2662 s
File: /home/beams0/VNIKITIN/ptycho/solver_gpu.py
Function: grad_ptycho at line 249

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   249                                               @profile
   250                                               # Gradient descent ptychography
   251                                               def grad_ptycho(self, data, init, niter, rho, gamma, hobj, lamd):
   252        10       7774.0    777.4      0.1          psi = init.copy()
   253        20        152.0      7.6      0.0          for i in range(niter):
   254        10    2524605.0 252460.5     20.6              tmp = self.fwd_ptycho(psi)
   255        10    6087571.0 608757.1     49.6              tmp = self.update_amp(tmp, data)
   256        10    3068395.0 306839.5     25.0              upd1 = self.adj_ptycho(tmp)
   257        10     229683.0  22968.3      1.9              upd2 = self.adjfwd_prb(psi)
   258                                                       psi = (1 - rho*gamma) * psi + rho*gamma * \
   259        10     348005.0  34800.5      2.8                  (hobj - lamd/rho) + (gamma / 2) * (upd1-upd2)
   260        10         14.0      1.4      0.0          return psi

Total time: 16.3304 s
File: /home/beams0/VNIKITIN/ptycho/solver_gpu.py
Function: admm at line 262

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   262                                               @profile
   263                                               # ADMM for ptycho-tomography problem
   264                                               def admm(self, data, hobj, psi, lamd, recobj, rho, gamma, eta, piter, titer):
   265        11         24.0      2.2      0.0          for m in range(10):
   266                                                       # Ptychography
   267        10   12291554.0 1229155.4     75.3              psi = self.grad_ptycho(data, psi, piter, rho, gamma, hobj, lamd)
   268                                                       # Tomography
   269        10    1074746.0 107474.6      6.6              tmp = -1j*self.logtomo(psi+lamd/rho)
   270        10     887733.0  88773.3      5.4              _recobj = self.grad_tomo(tmp, titer, recobj, eta)
   271                                                       # Lambda update
   272        10     306289.0  30628.9      1.9              _hobj = self.fwd_tomo(_recobj.complexform)
   273        10     562881.0  56288.1      3.4              _hobj = self.exptomo(_hobj)
   274        10      77387.0   7738.7      0.5              _lamd = lamd + 1 * rho * (psi - _hobj)
   275                                           
   276                                                       # convergence
   277        10     346381.0  34638.1      2.1              cp = np.sqrt(np.sum(np.power(np.abs(hobj-psi), 2)))
   278        10         33.0      3.3      0.0              co = np.sqrt(
   279        10      88346.0   8834.6      0.5                  np.sum(np.power(np.abs(recobj.complexform - _recobj.complexform), 2)))
   280        10     299043.0  29904.3      1.8              cl = np.sqrt(np.sum(np.power(np.abs(lamd-_lamd), 2)))
   281        10        519.0     51.9      0.0              print(m, cp, co, cl)
   282        10         23.0      2.3      0.0              dxchange.write_tiff(
   283        10     189923.0  18992.3      1.2                  recobj.beta[:, recobj.beta.shape[0] // 2],  'beta/beta')
   284        10         32.0      3.2      0.0              dxchange.write_tiff(
   285        10     204161.0  20416.1      1.3                  recobj.delta[:, recobj.delta.shape[0] // 2],  'delta/delta')
   286                                                       ##############
   287                                           
   288                                                       # update to next iter
   289        10        642.0     64.2      0.0              lamd = _lamd
   290        10         30.0      3.0      0.0              recobj = _recobj
   291        10        653.0     65.3      0.0              hobj = _hobj

