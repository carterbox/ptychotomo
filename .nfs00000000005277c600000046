Timer unit: 1e-06 s

Total time: 0 s
File: /home/beams0/VNIKITIN/ptycho/solver.py
Function: grad_tomo at line 120

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   120                                               @profile
   121                                               # Gradient descent tomography
   122                                               def grad_tomo(self, data, niter, init, eta):
   123                                                   r = 1/np.sqrt(data.shape[0]*data.shape[1]/2)
   124                                                   res = init.complexform/r
   125                                                   for i in range(niter):
   126                                                       tmp = self.fwd_tomo(res)*r
   127                                                       tmp = self.adj_tomo(2*(tmp-data))*r
   128                                                       res = res - eta*tmp
   129                                                   res *= r
   130                                                   return objects.Object(res.imag, res.real, self.voxelsize)

Total time: 0 s
File: /home/beams0/VNIKITIN/ptycho/solver.py
Function: grad_ptycho at line 131

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   131                                               @profile
   132                                               # Gradient descent ptychography
   133                                               def grad_ptycho(self, data, init, niter, rho, gamma, hobj, lamd):
   134                                                   psi = init.copy()
   135                                                   for i in range(niter):
   136                                                       tmp = self.fwd_ptycho(psi)
   137                                                       tmp = self.update_amp(tmp, data)
   138                                                       upd1 = self.adj_ptycho(tmp)
   139                                                       upd2 = self.adjfwd_prb(psi)
   140                                                       psi = (1 - rho*gamma) * psi + rho*gamma * \
   141                                                           (hobj - lamd/rho) + (gamma / 2) * (upd1-upd2)
   142                                                   return psi

Total time: 0 s
File: /home/beams0/VNIKITIN/ptycho/solver.py
Function: admm at line 144

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   144                                               @profile
   145                                               # ADMM for ptycho-tomography problem
   146                                               def admm(self, data, hobj, psi, lamd, recobj, rho, gamma, eta, piter, titer):
   147                                                   for m in range(10):
   148                                                       # Ptychography
   149                                                       psi = self.grad_ptycho(data, psi, piter, rho, gamma, hobj, lamd)
   150                                                       # Tomography
   151                                                       tmp = self.logtomo(psi+lamd/rho)
   152                                                       _recobj = self.grad_tomo(tmp, titer, recobj, eta)
   153                                                       # Lambda update
   154                                                       _hobj = self.fwd_tomo(_recobj.complexform)
   155                                                       _hobj = self.exptomo(_hobj)
   156                                                       _lamd = lamd + 1 * rho * (psi - _hobj)
   157                                           
   158                                                       # convergence
   159                                                       cp = np.sqrt(np.sum(np.power(np.abs(hobj-psi), 2)))
   160                                                       co = np.sqrt(
   161                                                           np.sum(np.power(np.abs(recobj.complexform - _recobj.complexform), 2)))
   162                                                       cl = np.sqrt(np.sum(np.power(np.abs(lamd-_lamd), 2)))
   163                                                       print(m, cp, co, cl)
   164                                           
   165                                                       # update to next iter
   166                                                       lamd = _lamd
   167                                                       recobj = _recobj
   168                                                       hobj = _hobj

Total time: 0.967349 s
File: /home/beams0/VNIKITIN/ptycho/solver_gpu.py
Function: grad_tomo at line 251

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   251                                               @profile
   252                                               # Gradient descent tomography
   253                                               def grad_tomo(self, data, niter, init, eta):
   254        10        147.0     14.7      0.0          r = 1/np.sqrt(data.shape[0]*data.shape[1]/2)
   255        10      28033.0   2803.3      2.9          res = init.complexform/r
   256        20         93.0      4.7      0.0          for i in range(niter):
   257        10     340171.0  34017.1     35.2              tmp = self.fwd_tomo(res)*r
   258        10     582342.0  58234.2     60.2              tmp = self.adj_tomo(2*(tmp-data))*r
   259        10      10894.0   1089.4      1.1              res = res - eta*tmp
   260        10       5493.0    549.3      0.6          res *= r
   261        10        176.0     17.6      0.0          return objects.Object(res.imag, res.real, self.voxelsize)

Total time: 14.1805 s
File: /home/beams0/VNIKITIN/ptycho/solver_gpu.py
Function: grad_ptycho at line 263

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   263                                               @profile
   264                                               # Gradient descent ptychography
   265                                               def grad_ptycho(self, data, init, niter, rho, gamma, hobj, lamd):
   266        10       8162.0    816.2      0.1          psi = init.copy()
   267        20        160.0      8.0      0.0          for i in range(niter):
   268        10    3150180.0 315018.0     22.2              tmp = self.fwd_ptycho(psi)
   269        10    6632564.0 663256.4     46.8              tmp = self.update_amp(tmp, data)
   270        10    3491372.0 349137.2     24.6              upd1 = self.adj_ptycho(tmp)
   271        10     536101.0  53610.1      3.8              upd2 = self.adjfwd_prb(psi)
   272                                                       psi = (1 - rho*gamma) * psi + rho*gamma * \
   273        10     361980.0  36198.0      2.6                  (hobj - lamd/rho) + (gamma / 2) * (upd1-upd2)
   274        10         13.0      1.3      0.0          return psi

Total time: 20.0312 s
File: /home/beams0/VNIKITIN/ptycho/solver_gpu.py
Function: admm at line 276

Line #      Hits         Time  Per Hit   % Time  Line Contents
==============================================================
   276                                               @profile
   277                                               # ADMM for ptycho-tomography problem
   278                                               def admm(self, data, hobj, psi, lamd, recobj, rho, gamma, eta, piter, titer):
   279        11         30.0      2.7      0.0          for m in range(10):
   280                                                       # Ptychography
   281        10   14205734.0 1420573.4     70.9              psi = self.grad_ptycho(data, psi, piter, rho, gamma, hobj, lamd)
   282                                                       # Tomography
   283        10    1029707.0 102970.7      5.1              tmp = self.logtomo(psi+lamd/rho)
   284        10     967733.0  96773.3      4.8              _recobj = self.grad_tomo(tmp, titer, recobj, eta)
   285                                                       # Lambda update
   286        10     334660.0  33466.0      1.7              _hobj = self.fwd_tomo(_recobj.complexform)
   287        10     628750.0  62875.0      3.1              _hobj = self.exptomo(_hobj)
   288        10      83204.0   8320.4      0.4              _lamd = lamd + 1 * rho * (psi - _hobj)
   289                                           
   290                                                       # convergence
   291        10     369186.0  36918.6      1.8              cp = np.sqrt(np.sum(np.power(np.abs(hobj-psi), 2)))
   292        10         32.0      3.2      0.0              co = np.sqrt(
   293        10      94622.0   9462.2      0.5                  np.sum(np.power(np.abs(recobj.complexform - _recobj.complexform), 2)))
   294        10     296149.0  29614.9      1.5              cl = np.sqrt(np.sum(np.power(np.abs(lamd-_lamd), 2)))
   295        10        514.0     51.4      0.0              print(m, cp, co, cl)
   296        10         28.0      2.8      0.0              dxchange.write_tiff(
   297        10     991248.0  99124.8      4.9                  recobj.beta[:, recobj.beta.shape[0] // 2],  'beta/beta')
   298        10         45.0      4.5      0.0              dxchange.write_tiff(
   299        10    1028013.0 102801.3      5.1                  recobj.delta[:, recobj.delta.shape[0] // 2],  'delta/delta')
   300                                                       ##############
   301                                           
   302                                                       # update to next iter
   303        10         55.0      5.5      0.0              lamd = _lamd
   304        10         34.0      3.4      0.0              recobj = _recobj
   305        10       1433.0    143.3      0.0              hobj = _hobj

